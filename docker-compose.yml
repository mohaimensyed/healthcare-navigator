# Healthcare Cost Navigator - Docker Compose Configuration
# This sets up the complete application stack with database and web service

version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: healthcare_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthcare}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Persistent database storage
      - postgres_data:/var/lib/postgresql/data
      # Optional: Custom initialization scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-healthcare}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # FastAPI Application Service
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.11
    container_name: healthcare_api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database connection
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-healthcare}
      
      # OpenAI API (required)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
      # CORS settings
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Performance settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - MAX_SEARCH_RESULTS=${MAX_SEARCH_RESULTS:-100}
    volumes:
      # Mount data directory for ETL
      - ./data:/app/data:ro
      # Mount app code for development (comment out for production)
      - ./app:/app/app:ro
      # Log storage
      - app_logs:/app/logs
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Optional: Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: healthcare_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - healthcare_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - cache
    # Only start if cache profile is enabled: docker-compose --profile cache up

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: healthcare_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - healthcare_network
    profiles:
      - production
    # Only start if production profile is enabled: docker-compose --profile production up

  # Optional: Database Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healthcare_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@healthcare.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - healthcare_network
    profiles:
      - admin
    # Only start if admin profile is enabled: docker-compose --profile admin up

  # ETL Service (one-time data loading)
  etl:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: healthcare_etl
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-healthcare}
      - DATA_FILE_PATH=/app/data/sample_prices_ny.csv
    volumes:
      - ./data:/app/data:ro
      - etl_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - healthcare_network
    command: python etl.py
    profiles:
      - etl
    # Run ETL with: docker-compose --profile etl up etl

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
    name: healthcare_postgres_data
  
  redis_data:
    driver: local
    name: healthcare_redis_data
  
  pgadmin_data:
    driver: local
    name: healthcare_pgadmin_data
  
  app_logs:
    driver: local
    name: healthcare_app_logs
  
  nginx_logs:
    driver: local
    name: healthcare_nginx_logs
  
  etl_logs:
    driver: local
    name: healthcare_etl_logs

# Custom Network
networks:
  healthcare_network:
    driver: bridge
    name: healthcare_network

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic development setup:
#   docker-compose up -d

# Production setup with nginx:
#   docker-compose --profile production up -d

# With caching enabled:
#   docker-compose --profile cache up -d

# With database admin:
#   docker-compose --profile admin up -d

# Run ETL process:
#   docker-compose --profile etl up etl

# All services:
#   docker-compose --profile production --profile cache --profile admin up -d

# =============================================================================
# MANAGEMENT COMMANDS
# =============================================================================

# View logs:
#   docker-compose logs -f app
#   docker-compose logs -f db

# Execute commands in running containers:
#   docker-compose exec app bash
#   docker-compose exec db psql -U postgres -d healthcare

# Stop services:
#   docker-compose down

# Stop and remove volumes (WARNING: deletes all data):
#   docker-compose down -v

# Rebuild and restart:
#   docker-compose up --build -d

# Scale the app service:
#   docker-compose up --scale app=3 -d

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Check service health:
#   docker-compose ps

# View resource usage:
#   docker stats

# Check networks:
#   docker network ls
#   docker network inspect healthcare_network

# Database connection test:
#   docker-compose exec app python -c "from app.database import test_db_connection; import asyncio; print(asyncio.run(test_db_connection()))"

# Reset database (WARNING: deletes all data):
#   docker-compose down
#   docker volume rm healthcare_postgres_data
#   docker-compose up -d

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Required:
# - OPENAI_API_KEY

# Optional (with defaults):
# - POSTGRES_DB=healthcare
# - POSTGRES_USER=postgres  
# - POSTGRES_PASSWORD=postgres
# - API_PORT=8000
# - ENVIRONMENT=development
# - LOG_LEVEL=INFO

# Create .env file with:
# OPENAI_API_KEY=your_key_here
# POSTGRES_PASSWORD=secure_password_here